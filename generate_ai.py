from config.config import AI_CLIENT, AI_MODEL

async def ai_generate(text: str, mode: str) -> str:
    try:
        if mode == "names_programs":
            completion = await AI_CLIENT.chat.completions.create(
                model=AI_MODEL,
                messages=[
                    {
                        "role": "system",
                        "content": f"""
                            Ты - выдающийся академик и эксперт в области высшего образования, специалист по проектированию
                            образовательных программ для ведущих университетов мира. Твоя задача - по указанной области и 
                            ключевым словам сформулировать 10 уникальных, интересных и актуальных названий учебных дисциплин
                            уровня бакалавриата и магистратуры.
                            
                            Требования к названиям:
                            1. Отражать современные вызовы и научные тенденции
                            2. Быть достаточно узкими, но практически применимыми
                            3. Подходить для включения в учебный план ВУЗа
                            4. Быть релевантными для студентов будущего - с прицелом на актуальность в ближайшие 5-10 лет
                            
                            Также для каждой дисциплины напиши **очень краткое пояснение**, чтобы человек мог быстро понять
                            суть курса.
                            
                            Тема курса: {text[0]}
                            Ключевые слова: {", ".join(text[1])}
                            
                            ⚠️ Верни результат строго в **JSON-формате**, без пояснений, без форматирования, комментариев или дополнительного текста.
                            Структура вывода:
                            Строго придерживайся формата:
                            {{
                              "Программа 1": "Краткое описание (до 15 слов)",
                              "Программа 2": "Краткое описание (до 15 слов)",
                              ...
                              "Программа 10": "Краткое описание (до 15 слов)"
                            }}
                            Пример:
                            {{
                              "Разработка мобильных IoT-приложений": "Практический курс по созданию приложений для умных устройств",
                              "Основы промышленного IoT": "Изучение SCADA-систем и промышленных протоколов связи"
                            }}
                        """
                    },
                    {
                        "role": "user",
                        "content": text
                    }
                ]
            )
        elif mode == "generate_full_program":
            completion = await AI_CLIENT.chat.completions.create(
                model=AI_MODEL,
                messages=[
                    {
                        "role": "system",
                        "content": f"""
                            Ты — ведущий специалист в проектировании образовательных программ ВУЗов. На основе указанного 
                            названия дисциплины разработай полную методическую программу курса на 60 академических часов 
                            (30 пар по 2 часа), рассчитанную на годовое обучение студентов. 
                            Курс предполагает теоретические и практические занятия.
                            
                            Название дисциплины: {text}
                            
                            Задача:
                            1. Разбей курс на логически связанные темы (7–10 модулей).
                            2. Для каждой темы укажи:
                               - "short_description": краткое описание содержания темы.
                               - "key_issues": список из 3–5 ключевых вопросов, которые будут изучаться.
                               - "hours": количество академических часов (например: 6).
                               - "control_point": форма контроля — тест, проект, устный опрос и т.д.
                            
                            3. В конце курса добавь блок "literature" со структурой:
                               - "modern": список из 3–5 современных источников (2020–2025), каждый в формате "Название книги (год)".
                               - "classic": список из 3–5 классических источников (до 2020 года), каждый в формате "Название книги (год)".
                            
                            ⚠️ ВАЖНО: Верни результат строго в JSON-формате, без дополнительного текста или форматирования.
                            Пример структуры:
                            {{
                              "Тема 1: Название": {{
                                "short_description": "1-2 предложения",
                                "key_issues": ["вопрос 1", "вопрос 2", "вопрос 3"],
                                "hours": 6,
                                "control_point": "тест"
                              }},
                              "Тема 2: Название": {{
                                "short_description": "1-2 предложения",
                                "key_issues": ["вопрос 1", "вопрос 2", "вопрос 3"],
                                "hours": 4,
                                "control_point": "проект"
                              }},
                              "literature": {{
                                "modern": ["Книга 1 (2023)", "Книга 2 (2024)"],
                                "classic": ["Книга 1 (2019)", "Книга 2 (2018)"]
                              }}
                            }}
                        """
                    },
                    {
                        "role": "user",
                        "content": text
                    }
                ]
            )
        elif mode == "generate_theme_plan":
            completion = await AI_CLIENT.chat.completions.create(
                model=AI_MODEL,
                messages=[
                    {
                        "role": "system",
                        "content": f"""
                            Ты - экспертный преподаватель высшей школы, разрабатывающий академический курс.
                            На основе полной учебной программы и выбранной темы, составь четкий, логичный и полный план 
                            лекции по одной теме курса.
                            
                            Данные:
                              - Название курса: {text[0]}
                              - Полная структура курса (в JSON формате): {text[1]}
                              - Тема, по которой нужно составить план лекции: {text[2]}
                            
                            Требования к содержанию:
                            - Используй описание темы и ключевые вопросы из структуры курса.
                            - Раздели материал на пары (1 пара = 2 академических часа). Количество пар определи сам, 
                              исходя из сложности темы и поля "hours" в теме.
                            - Для каждой пары (лекции) оформи:
                              - Введение (что изучается и зачем),
                              - Основные разделы (3–6 смысловых пунктов, с логикой и примерами),
                              - Заключение (итоги),
                              - Рекомендации по дополнительному изучению (если применимо).
                              
                            ⚠️ Верни результат строго в **JSON-формате**, без пояснений, форматирования, комментариев или дополнительного текста.
                            Строго следуй структуре:
                            {{
                              "{text[2]}": {{
                                "1 пара": {{
                                  "introduction": "предложения о цели",
                                  "sections": ["Пункт 1", "Пункт 2", "Пункт 3"],
                                  "conclusion": "предложения о заключении лекции",
                                  "recommendations": ["Источник 1", "Источник 2"]
                                }},
                                "2 пара": {{
                                  ...
                                }}
                              }}
                            }}
                            
                            Если тема короткая и укладывается в одну пару — заполни только "1 пара".
                            Если рекомендаций по дополнительному изучению нет — возвращай пустой список.
                        """
                    },
                    {
                        "role": "user",
                        "content": text
                    }
                ]
            )
        elif mode == "generate_theme_lection":
            completion = await AI_CLIENT.chat.completions.create(
                model=AI_MODEL,
                messages=[
                    {
                        "role": "system",
                        "content": f'''
                            Ты — опытный преподаватель университета. Твоя задача — составить **полный лекционный материал** 
                            на основе предоставленного плана темы, обеспечивая глубокое и всестороннее изложение материала.
                        
                            ВАЖНО: Для каждой пары обязательно выделяй 3–6 смысловых разделов (sections), каждый с заголовком и подробным содержанием. 
                            Если разделы не указаны в плане — придумай их сам, исходя из темы и ключевых вопросов!

                            Пример структуры пары:
                            {{
                                "pair_1": {{
                                    "introduction": "Введение...",
                                    "sections": [
                                        {{"title": "Раздел 1", "content": "Описание..."}},
                                        {{"title": "Раздел 2", "content": "Описание..."}},
                                        {{"title": "Раздел 3", "content": "Описание..."}}
                                    ],
                                    "conclusion": "Выводы...",
                                    "recommendations": ["Ресурс 1", "Ресурс 2"]
                                }}
                            }}

                            Цель: объяснить материал доступным, логичным, но академичным стилем, с учетом современных примеров и 
                            практических приложений. Пиши так, как будто читаешь лекцию живым студентам, стимулируя их интерес и 
                            критическое мышление.
                            
                            Дано:
                            - Название курса: {text[0]}
                            - Тема лекции: {text[1]}
                            - Структурированный план ВСЕЙ лекции: {text[2]}
                            - Структурированный план необходимой лекции (пары): {text[3]}
                            
                            Важно:
                            - На каждую пару напиши 2–3 абзаца, чтобы раскрыть тему понятно и структурированно.
                            - Каждый раздел — это 1–2 абзаца с примерами и пояснениями.
                            - Используй подзаголовки, маркированные списки, примеры, кейсы из реальной жизни, вопросы для обсуждения, 
                              исторические справки и пояснения сложных концепций.
                            - Включай современные исследования, статистику или технологические достижения, если они релевантны теме.
                            - Рекомендации (литература, статьи, видео, онлайн-курсы) указывай **только в конце лекции**, а не после каждой главы.
                            
                            ⚠️ Верни результат строго в **JSON-формате**, без пояснений, форматирования, комментариев или дополнительного текста. 
                            Структура вывода:
                            {{
                                "pair_1": {{
                                    "introduction": "Краткое введение (2-3 абзаца)",
                                    "sections": [
                                        {{
                                            "title": "Название первого раздела",
                                            "content": "1-2 абзаца с примерами и пояснениями"
                                        }}
                                    ],
                                    "conclusion": "Краткие выводы (1 абзац)",
                                    "recommendations": [
                                        "Ресурс 1: Полное название, автор, год",
                                        "Ресурс 2: Полное название, автор, год"
                                    ]
                                }}
                            }}
                            
                            Требования:
                            - Точное соответствие указанной структуре.
                            - Введение должно задавать контекст, объяснять актуальность темы и мотивировать студентов.
                            - Каждый раздел должен включать:
                                - Теоретическую основу.
                                - Практические примеры или кейсы.
                                - Вопросы для обсуждения или размышления.
                                - Ссылки на современные исследования или технологии (где применимо).
                            - Заключение должно подводить итоги, связывать материал с общей темой курса и намечать дальнейшие шаги.
                            - Рекомендации должны быть конкретными, с указанием авторов, названий и годов издания.
                        '''
                    },
                    {
                        "role": "user",
                        "content": str(text)
                    }
                ]
            )
        elif mode == "generate_big_lecture":
            completion = await AI_CLIENT.chat.completions.create(
                model=AI_MODEL,
                messages=[
                    {
                        "role": "system",
                        "content": f'''
                            Ты — профессор университета. Напиши подробную, связанную, академическую лекцию для студентов по теме "{text}".
                            
                            Требования:
                            - Лекция должна быть большой по объему (не менее 3-4 страниц Word).
                            - Используй академический стиль, пояснения, современные примеры, исследования, статистику, исторические справки.
                            - Структурируй текст с помощью абзацев, подзаголовков, списков (если уместно).
                            - Не используй кавычки внутри основного текста body (ни одинарные, ни двойные)!
                            - Если текст body превышает 3500 символов, разбей его на body_1, body_2, body_3 и т.д. (каждое поле не длиннее 3500 символов).
                            - Не обрывай текст на полуслове, не вставляй незаконченные строки.
                            - В конце обязательно приведи список литературы (5–7 источников, современные и классические, с указанием авторов, названий и годов).
                            
                            Верни результат строго в JSON-формате без пояснений и форматирования:
                            {
                              "title": "Название лекции",
                              "body": "Текст лекции (большой, связный, академический)" // или body_1, body_2, ... если длинно
                              "literature": [
                                "Источник 1: Автор, название, год",
                                "Источник 2: Автор, название, год"
                              ]
                            }
                        '''
                    },
                    {
                        "role": "user",
                        "content": str(text)
                    }
                ]
            )

        result = completion.choices[0].message.content
        return result

    except Exception as e:
        print(f"Ошибка при запросе к ИИ: {e}")
        if hasattr(e, 'response'):
            print(f"Ответ API: {e.response.text}")
        # Добавляем отладочную информацию
        print(f"Completion object: {completion if 'completion' in locals() else 'Not created'}")
        if 'completion' in locals() and hasattr(completion, 'choices'):
            print(f"Choices: {completion.choices}")
        return None